import {
  Button,
  FormControl,
  FormLabel,
  Input,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  Textarea,
  FormErrorMessage,
  useToast,
} from "@chakra-ui/react";

import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { isEmpty } from "lodash";
import { useForm } from "react-hook-form";
import useAddAppointment from "../../../hooks/appointments/useAddAppointment";
import { Appointment } from "../../../types";

const schema = z.object({
  patientId: z.string().min(1, "Patient ID is required"),
  doctorId: z.string().min(1, "Doctor ID is required"),
  departmentId: z.string().min(1, "Department ID is required"),
  date: z.string().min(1, "Date is required"),
  time: z.string().min(1, "Time is required"),
  status: z.enum(['scheduled', 'completed', 'cancelled', 'rescheduled']).default('scheduled'),
  type: z.enum(['consultation', 'follow-up', 'emergency', 'routine']).default('consultation'),
  notes: z.string().optional(),
});

type AppointmentForm = z.infer<typeof schema>;

interface Props {
  dateRange: string;
  isOpen: boolean;
  isClose: () => void;
  deptName: string;
  doctorName: string;
}

export const AddAppointmentForm = ({
  dateRange,
  isOpen,
  isClose,
  deptName,
  doctorName,
}: Props) => {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<AppointmentForm>({ resolver: zodResolver(schema) });

  const appointment = useAddAppointment();

  const isError = !isEmpty(errors);

  const onSubmit = (data: AppointmentForm) => {
    const appointmentData: Appointment = {
      _id: '', // Will be generated by server
      patientId: data.patientId,
      doctorId: data.doctorId,
      departmentId: data.departmentId,
      date: data.date,
      time: data.time,
      status: data.status,
      type: data.type,
      notes: data.notes,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };
    appointment.mutate(appointmentData);
    reset();
  };

  const toast = useToast();

  return (
    <>
      <Modal isOpen={isOpen} onClose={isClose}>
        <ModalOverlay />

        <ModalContent>
          <form onSubmit={handleSubmit(onSubmit)}>
            <ModalHeader>Create New Appointment</ModalHeader>
            <ModalCloseButton />
            <ModalBody>
              <FormControl isInvalid={!!errors.patientId}>
                <FormLabel>Patient ID</FormLabel>
                <Input
                  {...register("patientId")}
                  type="text"
                  placeholder="Patient ID"
                />
                {errors.patientId && (
                  <FormErrorMessage>
                    {errors.patientId.message}
                  </FormErrorMessage>
                )}
              </FormControl>
              
              <FormControl isInvalid={!!errors.doctorId}>
                <FormLabel>Doctor ID</FormLabel>
                <Input
                  {...register("doctorId")}
                  type="text"
                  placeholder="Doctor ID"
                />
                {errors.doctorId && (
                  <FormErrorMessage>{errors.doctorId.message}</FormErrorMessage>
                )}
              </FormControl>

              <FormControl isInvalid={!!errors.departmentId}>
                <FormLabel>Department ID</FormLabel>
                <Input
                  {...register("departmentId")}
                  type="text"
                  placeholder="Department ID"
                />
                {errors.departmentId && (
                  <FormErrorMessage>{errors.departmentId.message}</FormErrorMessage>
                )}
              </FormControl>

              <FormControl isInvalid={!!errors.date}>
                <FormLabel>Date</FormLabel>
                <Input
                  {...register("date")}
                  type="date"
                  defaultValue={dateRange}
                />
                {errors.date && (
                  <FormErrorMessage>{errors.date.message}</FormErrorMessage>
                )}
              </FormControl>
              
              <FormControl isInvalid={!!errors.time}>
                <FormLabel>Time</FormLabel>
                <Input {...register("time")} type="time" />
                {errors.time && (
                  <FormErrorMessage>{errors.time.message}</FormErrorMessage>
                )}
              </FormControl>

              <FormControl>
                <FormLabel>Type</FormLabel>
                <Input
                  {...register("type")}
                  type="text"
                  placeholder="Appointment type"
                />
              </FormControl>

              <FormControl>
                <FormLabel>Notes</FormLabel>
                <Textarea {...register("notes")} placeholder="Additional notes"></Textarea>
              </FormControl>
            </ModalBody>
            <ModalFooter>
              <Button type="submit">Create</Button>
            </ModalFooter>
          </form>
        </ModalContent>
      </Modal>
      {appointment.isSuccess && (
        <Button
          onClick={() =>
            toast({
              title: "Appointment created.",
              description: "We've created your account for you.",
              status: "success",
              duration: 9000,
              isClosable: true,
            })
          }
        ></Button>
      )}
    </>
  );
};
