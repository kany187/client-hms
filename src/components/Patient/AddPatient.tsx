import {
  Alert,
  AlertIcon,
  Avatar,
  Box,
  Button,
  FormControl,
  FormLabel,
  FormErrorMessage,
  Heading,
  Input,
  SimpleGrid,
  Tab,
  TabIndicator,
  TabList,
  TabPanel,
  TabPanels,
  Tabs,
  Text,
  Textarea,
  Select,
  Container,
  VStack,
  HStack,
  useToast,
  Spinner,
} from "@chakra-ui/react";

import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import useAddPatient from "../../hooks/patients/useAddPatient";
import { Patient } from "../../types";
import { useNavigate } from "react-router-dom";

export const schema = z.object({
  firstName: z.string().min(2, "First name must be at least 2 characters"),
  lastName: z.string().min(2, "Last name must be at least 2 characters"),
  addressStreet: z.string().min(5, "Street address must be at least 5 characters"),
  addressCity: z.string().min(2, "City must be at least 2 characters"),
  phone: z.string().min(10, "Phone number must be at least 10 digits"),
  gender: z.enum(['male', 'female', 'other'], {
    errorMap: () => ({ message: "Please select a valid gender" })
  }),
  dob: z.string().min(1, "Date of birth is required"),
  occupation: z.string().optional(),
  marital: z.enum(['single', 'married', 'divorced', 'widowed'], {
    errorMap: () => ({ message: "Please select a valid marital status" })
  }),
  desc: z.string().optional(),
});

type FormData = z.infer<typeof schema>;

export const AddPatient = () => {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors, isSubmitting },
  } = useForm<FormData>({
    resolver: zodResolver(schema),
  });

  const navigate = useNavigate();
  const toast = useToast();
  const addPatient = useAddPatient();

  const onSubmit = async (data: FormData) => {
    try {
      // Convert FormData to Patient type by adding required fields
      const patientData: Patient = {
        ...data,
        _id: '', // Will be generated by the server
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        email: '', // Optional field
        nationality: '', // Optional field
        admissionDate: '', // Optional field
        doctorAssigned: '', // Optional field
        roomNumber: '', // Optional field
        condition: '', // Optional field
        guardian: undefined, // Optional field
      };
      
      await addPatient.mutateAsync(patientData);
      toast({
        title: "Patient Added Successfully",
        description: "The patient has been added to the system.",
        status: "success",
        duration: 3000,
        isClosable: true,
      });
      reset();
      navigate("/patient");
    } catch (error) {
      toast({
        title: "Error Adding Patient",
        description: "There was an error adding the patient. Please try again.",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    }
  };

  return (
    <Container maxW="container.xl" py={8}>
      <VStack spacing={6} align="stretch">
        {addPatient.error && (
          <Alert status="error">
            <AlertIcon />
            {addPatient.error.message}
          </Alert>
        )}
        
        <Box textAlign="center">
          <Heading size="lg" mb={2}>Add New Patient</Heading>
          <Text color="gray.600">Fill in the patient information below</Text>
        </Box>

        <Tabs position="relative" variant="unstyled" colorScheme="teal">
          <TabList justifyContent="center" mb={6}>
            <Tab _selected={{ color: "teal.500", borderBottom: "2px solid" }}>
              Personal Information
            </Tab>
            <Tab _selected={{ color: "teal.500", borderBottom: "2px solid" }}>
              Guardian Information
            </Tab>
          </TabList>

          <TabPanels>
            <TabPanel>
              <VStack spacing={6} align="stretch">
                <Box textAlign="center">
                  <Avatar bg="teal.500" size="2xl" mb={4} />
                </Box>
                
                <form onSubmit={handleSubmit(onSubmit)}>
                  <SimpleGrid 
                    columns={{ base: 1, md: 2, lg: 3 }} 
                    spacing={6}
                  >
                    <FormControl isInvalid={!!errors.firstName}>
                      <FormLabel>First Name *</FormLabel>
                      <Input 
                        {...register("firstName")} 
                        placeholder="Enter first name"
                        bg="white"
                      />
                      <FormErrorMessage>
                        {errors.firstName?.message}
                      </FormErrorMessage>
                    </FormControl>

                    <FormControl isInvalid={!!errors.lastName}>
                      <FormLabel>Last Name *</FormLabel>
                      <Input 
                        {...register("lastName")} 
                        placeholder="Enter last name"
                        bg="white"
                      />
                      <FormErrorMessage>
                        {errors.lastName?.message}
                      </FormErrorMessage>
                    </FormControl>

                    <FormControl isInvalid={!!errors.phone}>
                      <FormLabel>Phone Number *</FormLabel>
                      <Input 
                        {...register("phone")} 
                        placeholder="Enter phone number"
                        type="tel"
                        bg="white"
                      />
                      <FormErrorMessage>
                        {errors.phone?.message}
                      </FormErrorMessage>
                    </FormControl>

                    <FormControl isInvalid={!!errors.gender}>
                      <FormLabel>Gender *</FormLabel>
                      <Select 
                        {...register("gender")} 
                        placeholder="Select gender"
                        bg="white"
                      >
                        <option value="male">Male</option>
                        <option value="female">Female</option>
                        <option value="other">Other</option>
                      </Select>
                      <FormErrorMessage>
                        {errors.gender?.message}
                      </FormErrorMessage>
                    </FormControl>

                    <FormControl isInvalid={!!errors.dob}>
                      <FormLabel>Date of Birth *</FormLabel>
                      <Input 
                        {...register("dob")} 
                        type="date"
                        bg="white"
                      />
                      <FormErrorMessage>
                        {errors.dob?.message}
                      </FormErrorMessage>
                    </FormControl>

                    <FormControl isInvalid={!!errors.marital}>
                      <FormLabel>Marital Status *</FormLabel>
                      <Select 
                        {...register("marital")} 
                        placeholder="Select marital status"
                        bg="white"
                      >
                        <option value="single">Single</option>
                        <option value="married">Married</option>
                        <option value="divorced">Divorced</option>
                        <option value="widowed">Widowed</option>
                      </Select>
                      <FormErrorMessage>
                        {errors.marital?.message}
                      </FormErrorMessage>
                    </FormControl>

                    <FormControl isInvalid={!!errors.addressStreet}>
                      <FormLabel>Street Address *</FormLabel>
                      <Input 
                        {...register("addressStreet")} 
                        placeholder="Enter street address"
                        bg="white"
                      />
                      <FormErrorMessage>
                        {errors.addressStreet?.message}
                      </FormErrorMessage>
                    </FormControl>

                    <FormControl isInvalid={!!errors.addressCity}>
                      <FormLabel>City *</FormLabel>
                      <Input 
                        {...register("addressCity")} 
                        placeholder="Enter city"
                        bg="white"
                      />
                      <FormErrorMessage>
                        {errors.addressCity?.message}
                      </FormErrorMessage>
                    </FormControl>

                    <FormControl>
                      <FormLabel>Occupation</FormLabel>
                      <Input 
                        {...register("occupation")} 
                        placeholder="Enter occupation"
                        bg="white"
                      />
                    </FormControl>

                    <FormControl>
                      <FormLabel>Description</FormLabel>
                      <Textarea 
                        {...register("desc")} 
                        placeholder="Additional information"
                        bg="white"
                        rows={3}
                      />
                    </FormControl>
                  </SimpleGrid>

                  <HStack justify="center" mt={8} spacing={4}>
                    <Button 
                      type="button" 
                      variant="outline" 
                      onClick={() => navigate("/patient")}
                    >
                      Cancel
                    </Button>
                    <Button 
                      type="submit" 
                      colorScheme="teal" 
                      isLoading={isSubmitting}
                      loadingText="Adding Patient..."
                    >
                      Add Patient
                    </Button>
                  </HStack>
                </form>
              </VStack>
            </TabPanel>
            
            <TabPanel>
              <SimpleGrid 
                columns={{ base: 1, md: 2, lg: 3 }} 
                spacing={6}
              >
                <FormControl>
                  <FormLabel>Guardian Name</FormLabel>
                  <Input placeholder="Enter guardian name" bg="white" />
                </FormControl>

                <FormControl>
                  <FormLabel>Phone Number</FormLabel>
                  <Input placeholder="Enter phone number" bg="white" />
                </FormControl>

                <FormControl>
                  <FormLabel>Address</FormLabel>
                  <Input placeholder="Enter address" bg="white" />
                </FormControl>

                <FormControl>
                  <FormLabel>Age</FormLabel>
                  <Input placeholder="Enter age" type="number" bg="white" />
                </FormControl>

                <FormControl>
                  <FormLabel>Relation</FormLabel>
                  <Select placeholder="Select relation" bg="white">
                    <option value="father">Father</option>
                    <option value="mother">Mother</option>
                    <option value="spouse">Spouse</option>
                    <option value="sibling">Sibling</option>
                    <option value="other">Other</option>
                  </Select>
                </FormControl>

                <FormControl>
                  <FormLabel>Occupation</FormLabel>
                  <Input placeholder="Enter occupation" bg="white" />
                </FormControl>

                <FormControl>
                  <FormLabel>Description</FormLabel>
                  <Textarea placeholder="Additional information" bg="white" rows={3} />
                </FormControl>
              </SimpleGrid>
              
              <HStack justify="center" mt={8} spacing={4}>
                <Button variant="outline">Cancel</Button>
                <Button colorScheme="teal">Save Guardian Info</Button>
              </HStack>
            </TabPanel>
          </TabPanels>
        </Tabs>
      </VStack>
    </Container>
  );
};
